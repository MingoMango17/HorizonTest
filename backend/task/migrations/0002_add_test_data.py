# Generated by Django 5.2.4 on 2025-09-02 08:15

from django.db import migrations
from django.contrib.auth.hashers import make_password


def create_test_data(apps, schema_editor):
    User = apps.get_model("auth", "User")  # Use apps.get_model for User too
    Task = apps.get_model("task", "Task")

    admin_user, admin_created = User.objects.get_or_create(
        username="admin",
        defaults={
            "email": "admin@example.com",
            "first_name": "Admin",
            "last_name": "User",
            "is_staff": True,
            "is_superuser": True,
            "password": make_password("admin"),
        },
    )

    test_user, created = User.objects.get_or_create(
        username="testuser",
        defaults={
            "email": "testuser@example.com",
            "first_name": "Test",
            "last_name": "User",
            "password": make_password("testpass123"),
        },
    )

    sample_tasks = [
        {
            "title": "Complete Django project setup",
            "description": "Set up models, views, and serializers for the task management API",
            "completed": False,
        },
        {
            "title": "Write unit tests",
            "description": "Create comprehensive tests for all API endpoints",
            "completed": False,
        },
        {
            "title": "Update documentation",
            "description": "Document all API endpoints and usage examples",
            "completed": True,
        },
        {
            "title": "Deploy to staging",
            "description": "Deploy the application to staging environment for testing",
            "completed": False,
        },
        {
            "title": "Code review",
            "description": "Review code changes with team members",
            "completed": True,
        },
    ]

    # Create tasks if they don't exist
    for task_data in sample_tasks:
        Task.objects.get_or_create(
            title=task_data["title"],
            owner=test_user,
            defaults={
                "description": task_data["description"],
                "completed": task_data["completed"],
            },
        )


def remove_test_data(apps, schema_editor):
    User = apps.get_model("auth", "User")
    Task = apps.get_model("task", "Task")

    try:
        test_user = User.objects.get(username="testuser")
        Task.objects.filter(owner=test_user).delete()
        test_user.delete()
    except User.DoesNotExist:
        pass

    try:
        admin_user = User.objects.get(username="admin")
        admin_user.delete()
    except User.DoesNotExist:
        pass


class Migration(migrations.Migration):

    dependencies = [
        ("task", "0001_initial"),
    ]

    operations = [
        migrations.RunPython(create_test_data, remove_test_data),
    ]
